#!/usr/bin/env node

/**
 * üîß Configurador Avanzado de Email - ZiteBackJS v3.9.1
 * Configuraci√≥n completa de notificaciones por email con m√∫ltiples opciones
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

console.log('üîß Configurador de Email - ZiteBackJS v3.9.1');
console.log('==============================================\n');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function pregunta(texto) {
    return new Promise((resolve) => {
        rl.question(texto, resolve);
    });
}

function mostrarInfo() {
    console.log('üìß ¬øQu√© es SendGrid y por qu√© es tan efectivo?\n');
    console.log('üìä SendGrid es un servicio profesional de env√≠o de emails que garantiza:');
    console.log('   ‚úÖ 99% de emails llegan a la BANDEJA DE ENTRADA (no spam)');
    console.log('   üöÄ Env√≠o instant√°neo y confiable');
    console.log('   üìà Estad√≠sticas detalladas de entrega');
    console.log('   üîí Autenticaci√≥n SPF/DKIM para evitar spam');
    console.log('   üí∞ 100 emails/d√≠a GRATIS para siempre');
    console.log('   üåç Infraestructura global\n');
    
    console.log('üÜö Comparaci√≥n con otras opciones:');
    console.log('   üìß Gmail/Outlook personal: Limitado, puede ir a spam');
    console.log('   üêò PHP mail(): Frecuentemente bloqueado como spam');
    console.log('   ‚≠ê SendGrid: Profesional, dise√±ado para aplicaciones\n');
}

async function configurarSendGrid() {
    console.log('üîë Proceso para obtener tu API Key de SendGrid:\n');
    
    const necesitaAyuda = await pregunta('¬øNecesitas ayuda para obtener tu API de SendGrid? (s/n): ');
    
    if (necesitaAyuda.toLowerCase().startsWith('s')) {
        console.log('\nüìã Gu√≠a paso a paso para crear cuenta y obtener API Key:\n');
        
        console.log('1Ô∏è‚É£ CREAR CUENTA GRATUITA:');
        console.log('   ‚Ä¢ Ve a: https://sendgrid.com');
        console.log('   ‚Ä¢ Click "Start for Free"');
        console.log('   ‚Ä¢ Llena el formulario (usa email real)');
        console.log('   ‚Ä¢ Verifica tu email');
        console.log('   ‚Ä¢ Completa la verificaci√≥n de cuenta\n');
        
        console.log('2Ô∏è‚É£ VERIFICAR DOMINIO/EMAIL:');
        console.log('   ‚Ä¢ En el dashboard: Settings > Sender Authentication');
        console.log('   ‚Ä¢ Si tienes dominio: "Authenticate Your Domain"');
        console.log('   ‚Ä¢ Si no: "Single Sender Verification" con tu email\n');
        
        console.log('3Ô∏è‚É£ CREAR API KEY:');
        console.log('   ‚Ä¢ Ve a: Settings > API Keys');
        console.log('   ‚Ä¢ Click "Create API Key"');
        console.log('   ‚Ä¢ Nombre: "ZiteBackJS-Notifications"');
        console.log('   ‚Ä¢ Tipo: "Restricted Access"');
        console.log('   ‚Ä¢ Mail Send: "Full Access" ‚úÖ');
        console.log('   ‚Ä¢ Guardar y COPIAR la key (solo se muestra una vez!)\n');
        
        await pregunta('Presiona ENTER cuando hayas completado todos los pasos...');
    }
    
    console.log('\nüîë Ahora vamos a configurar tu API Key:\n');
    
    const apiKey = await pregunta('üîê Pega tu API Key de SendGrid (empieza con SG.): ');
    
    if (!apiKey || !apiKey.startsWith('SG.')) {
        console.log('‚ùå Error: La API Key debe empezar con "SG."');
        return false;
    }
    
    const emailFrom = await pregunta('üì§ Email FROM (desde donde se env√≠an, ej: noreply@susitio.cl): ');
    const emailTo = await pregunta('üì• Email TO (donde recibir notificaciones, ej: tu@gmail.com): ');
    const domain = await pregunta('üåê Tu dominio (ej: susitio.cl): ');
    
    return { apiKey, emailFrom, emailTo, domain, tipo: 'sendgrid' };
}

async function configurarPHPMailer() {
    console.log('üêò Configuraci√≥n de PHP Mailer:\n');
    
    const necesitaAyuda = await pregunta('¬øNecesitas ayuda para configurar PHP Mailer? (s/n): ');
    
    if (necesitaAyuda.toLowerCase().startsWith('s')) {
        console.log('\nüìã Gu√≠a paso a paso para PHP Mailer:\n');
        
        console.log('1Ô∏è‚É£ CONFIGURAR GMAIL/SMTP:');
        console.log('   ‚Ä¢ Ve a: https://myaccount.google.com/security');
        console.log('   ‚Ä¢ Habilita "Verificaci√≥n en 2 pasos" (OBLIGATORIO)');
        console.log('   ‚Ä¢ Ve a "Contrase√±as de aplicaciones"');
        console.log('   ‚Ä¢ Selecciona app: "Correo" y dispositivo: "Otro"');
        console.log('   ‚Ä¢ Escribe: "ZiteBackJS" como nombre');
        console.log('   ‚Ä¢ Gmail generar√° una contrase√±a de 16 caracteres');
        console.log('   ‚Ä¢ ¬°IMPORTANTE! Usa esa contrase√±a, NO tu contrase√±a normal\\n');
        
        console.log('2Ô∏è‚É£ INFORMACI√ìN NECESARIA:');
        console.log('   ‚Ä¢ Host SMTP: smtp.gmail.com');
        console.log('   ‚Ä¢ Puerto: 587 (TLS recomendado) o 465 (SSL)');
        console.log('   ‚Ä¢ Usuario: tu email completo');
        console.log('   ‚Ä¢ Contrase√±a: la contrase√±a de aplicaci√≥n generada\n');
    }
    
    const smtpHost = await pregunta('üåê Host SMTP (presiona ENTER para smtp.gmail.com): ') || 'smtp.gmail.com';
    
    console.log('\nüîå Selecciona el puerto SMTP:');
    console.log('   1. Puerto 587 (TLS) - Recomendado para Gmail');
    console.log('   2. Puerto 465 (SSL) - Alternativo');
    const puertoOpcion = await pregunta('Elige opci√≥n (1 o 2): ');
    const smtpPort = puertoOpcion === '2' ? '465' : '587';
    
    const smtpUser = await pregunta('üë§ Tu email completo (ej: tu@gmail.com): ');
    const smtpPass = await pregunta('üîë Contrase√±a de aplicaci√≥n (16 caracteres de Google): ');
    const emailTo = await pregunta('üì• Email destino para notificaciones: ');
    
    return { 
        smtpHost, 
        smtpPort, 
        smtpUser, 
        smtpPass, 
        emailFrom: smtpUser, 
        emailTo, 
        tipo: 'phpmailer' 
    };
}

async function configurarBasico() {
    console.log('üìß Configuraci√≥n b√°sica con funci√≥n mail() nativa:\n');
    console.log('‚ö†Ô∏è IMPORTANTE: Esta opci√≥n puede tener problemas de entregabilidad');
    console.log('   Los emails pueden ir a spam o no llegar\n');
    
    const emailFrom = await pregunta('üì§ Email FROM (ej: noreply@tudominio.com): ');
    const emailTo = await pregunta('üì• Email TO (donde recibir notificaciones): ');
    
    return { emailFrom, emailTo, tipo: 'basic' };
}

function generarConfiguracion(config) {
    let envContent = `# Configuraci√≥n de Email para ZiteBackJS
# ESTE ARCHIVO EST√Å EN .GITIGNORE - Datos reales configurados
# Configurado autom√°ticamente el ${new Date().toLocaleString()}
# Charset: ${config.charset || 'utf-8'}

EMAIL_CHARSET=${config.charset || 'utf-8'}
`;

    switch (config.tipo) {
        case 'sendgrid':
            envContent += `# SendGrid Configuration
SENDGRID_API_KEY=${config.apiKey}
SENDGRID_FROM=${config.emailFrom}
SENDGRID_TO=${config.emailTo}
SENDGRID_DOMAIN=${config.domain}
EMAIL_SERVICE=sendgrid\n`;
            break;
            
        case 'phpmailer':
            envContent += `# PHP Mailer Configuration
SMTP_HOST=${config.smtpHost}
SMTP_PORT=${config.smtpPort}
SMTP_USER=${config.smtpUser}
SMTP_PASS=${config.smtpPass}
EMAIL_FROM=${config.emailFrom}
EMAIL_TO=${config.emailTo}
EMAIL_SERVICE=phpmailer\n`;
            break;
            
        case 'basic':
            envContent += `# Basic Mail Configuration
EMAIL_FROM=${config.emailFrom}
EMAIL_TO=${config.emailTo}
EMAIL_SERVICE=basic\n`;
            break;
    }
    
    envContent += `\nNODE_ENV=production`;
    
    return envContent;
}

async function configurarEmail() {
    try {
        mostrarInfo();
        
        // Preguntar sobre charset
        console.log('üî§ Configuraci√≥n de codificaci√≥n de caracteres:\n');
        const usarUTF8 = await pregunta('¬øDeseas utilizar UTF-8 como charset? (s/n) [Recomendado: s]: ');
        let charset = 'utf-8';
        
        if (!usarUTF8.toLowerCase().startsWith('s')) {
            charset = await pregunta('üî§ Ingresa el charset que deseas usar (ej: iso-8859-1, windows-1252): ') || 'utf-8';
        }
        
        console.log(`‚úÖ Charset seleccionado: ${charset}\n`);
        
        const usarSendGrid = await pregunta('¬øDeseas usar SendGrid para el env√≠o de correos? (s/n): ');
        
        let config;
        
        if (usarSendGrid.toLowerCase().startsWith('s')) {
            config = await configurarSendGrid();
            if (!config) return;
            config.charset = charset;
        } else {
            const usarPHPMailer = await pregunta('¬øUsar√°s PHP Mailer? (s/n): ');
            
            if (usarPHPMailer.toLowerCase().startsWith('s')) {
                config = await configurarPHPMailer();
                config.charset = charset;
            } else {
                const usarBasico = await pregunta('¬øConfigurar email b√°sico con funci√≥n mail()? (s/n): ');
                
                if (usarBasico.toLowerCase().startsWith('s')) {
                    config = await configurarBasico();
                    config.charset = charset;
                } else {
                    console.log('‚è≠Ô∏è Saltando configuraci√≥n de email. ZiteBackJS funcionar√° sin notificaciones.');
                    return;
                }
            }
        }
        
        // Generar archivo .env
        const envContent = generarConfiguracion(config);
        fs.writeFileSync('.env', envContent);
        
        console.log('\n‚úÖ ¬°Configuraci√≥n de email completada!');
        console.log('üìÑ Archivo .env creado con tu configuraci√≥n');
        console.log('üîí Este archivo est√° en .gitignore (no se sube a GitHub)');
        
        if (config.tipo === 'sendgrid') {
            console.log('\nüß™ Prueba tu configuraci√≥n ejecutando:');
            console.log('   node test-sendgrid-real.js');
        }
        
        console.log('\nüéâ ¬°ZiteBackJS ya puede enviar notificaciones por email!');
        console.log('üìß Recibir√°s emails cuando:');
        console.log('   ‚Ä¢ Se complete una descarga');
        console.log('   ‚Ä¢ Ocurra un error');
        console.log('   ‚Ä¢ Se detecten nuevos CDNs');
        
    } catch (error) {
        console.error('‚ùå Error:', error.message);
    } finally {
        rl.close();
    }
}

configurarEmail();